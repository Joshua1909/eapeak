#!/usr/bin/env python

"""
	-*- coding: utf-8 -*-
	eapeak
	
	Author: Spencer McIntyre <smcintyre [at] securestate [dot] com>
	
	Copyright 2011 SecureState
	
	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
	MA 02110-1301, USA.
		
"""

__version_major__ = '0'
__version_minor__ = '0'
__version_build__ = '10'
__version__ = "{0}.{1}.{2}".format(__version_major__, __version_minor__, __version_build__)
del __version_major__, __version_minor__, __version_build__

__authors__ = [ 'Spencer McIntyre', 'SecureState R&D Team' ]

def main():
	import os
	import sys
	from socket import error as socketError	# needed for the error
	import thread
	import logging
	import argparse
	try:
		import curses
		curses_enabled = True
	except ImportError:
		curses_enabled = False
	
	# these lines need to adjusted
	try:
		from scapy.config import conf
	except ImportError:
		print 'Error: Missing Scapy Libraries, Please Install Scapy'
		print 'Error: Now Exiting...'
		return 1
		
	# these edit the load_layers configuration to keep layers we don't need out and consume less memory
	not_needed_layers = [	'bluetooth', 'cdp', 'dhcp', 'dhcp6', 'dns', 'eigrp', 'hsrp', 'inet6', 'ir',
							'isakmp', 'l2tp', 'llmnr', 'mgcp', 'mobileip', 'netbios', 'netflow', 'ntp',
							'ospf', 'ppi_cace', 'ppi_geotag', 'ppi', 'ppp', 'rip', 'rtp', 'sctp', 'sebek',
							'skinny', 'smb', 'snmp', 'tftp', 'vrrp', 'x509'
						]

	for layer in not_needed_layers:
		conf.load_layers.remove(layer)
	del layer, not_needed_layers
	conf.ipv6_enabled = False
	
	from scapy.sendrecv import sniff
	
	try:																	# default to the systems libraries
		from eapeak.parse import EapeakParsingEngine						# revert to ./lib on fail for development
	except ImportError:
		sys.path.append(os.getcwd() + os.sep + 'lib')
		from eapeak.parse import EapeakParsingEngine
	
	parser = argparse.ArgumentParser(description = 'Analyze Wireless PCaps', conflict_handler='resolve')
	parser.add_argument('-f', '--file', dest = 'pcaps', nargs = '*', action = 'store', default = [], help = 'the path to the PCap file(s)')
	parser.add_argument('-s', '--ssid', dest = 'target_ssids', nargs = '*', action = 'store', help = 'specific SSID(s) to analyze')
	parser.add_argument('-l', '--live', dest = 'capture_live', action = 'store_true', default = False, help = 'analyze packets live')
	if curses_enabled:
		parser.add_argument('-c', '--curses', dest = 'use_curses', action = 'store_true', default = False, help = 'use the BETA curses interface when capturing live')
	parser.add_argument('-i', '--iface', dest = 'interface', action = 'store', help = 'interface to use for live capture')
	parser.add_argument('-v', '--version', action = 'version', version = parser.prog + ' Version: ' + __version__)
	results = parser.parse_args()
	pcapFiles = results.pcaps
	targetSSIDs = results.target_ssids
	capture_live = results.capture_live
	interface = results.interface
	if capture_live and curses_enabled:
		use_curses = results.use_curses
	else:
		use_curses = False
	if not capture_live and not pcapFiles:
		parser.print_help()
		return 0
	del results, parser
	
	if capture_live and not interface:
		print 'Error: You must specify an interface when using live mode.'
		return 1
	if capture_live and os.getuid():
		print 'Error: You must be root when using live mode.'
		return 1
	print """
 ________ 
< eapeak >
 -------- 
        \   ^__^
         \  (oo)\_______
            (__)\       )\\/\\
                ||----w |
                ||     ||
"""
	print 'Welcome To EAPeak\nVersion: ' + __version__ + '\n'
	
	# adjust the scapy logs to make them quite, a hat tip to Philippe Biondi for setting it up so nicely
	scapy_runtime_log = logging.getLogger("scapy.runtime")
	scapy_runtime_log.setLevel(logging.ERROR)
	
	eapeakParser = EapeakParsingEngine(targetSSIDs)
	
	if pcapFiles:
		eapeakParser.parsePCapFiles(pcapFiles, False)
		print ''
	
	if capture_live:
		print 'Begining Live Capture...'
		if use_curses:
			errCode = eapeakParser.initCurses()
			if errCode:
				print {1:'Screen must be at least 25x99 for Curses'}[errCode]
				return 1
			
		thread.start_new_thread(eapeakParser.cursesInteractionHandler, () )
		thread.start_new_thread(eapeakParser.cursesScreenDrawHandler, () )
		while True:
			try:
				sniff(iface = interface, store = 0, prn = lambda packet: eapeakParser.parseLiveCapture(packet) )
			except KeyboardInterrupt:
				break
			except socketError:
				print 'Invalid Interface'
				return 0
			except:
				pass
		if use_curses:
			eapeakParser.cleanupCurses()
		#return 0
		print '\nStopping Live Capture...'
		print ''
	
	if not len(eapeakParser.KnownNetworks):
		print 'Found No Usable Information\nTry Again With A Larger Capture'
		return 0	# we didn't find anything don't continue
	
	intro0 = 'EAPeak Summary of Wireless Networks'
	intro1 = 'Found ' + str(len(eapeakParser.KnownNetworks)) + ' Network(s)'
	intro = '*' * len(intro0) + '****\n'
	intro += '* ' + intro0 + ' *\n'
	intro += '* ' + intro1 + ' ' * (len(intro0) - len(intro1)) + ' *\n'
	intro += '*' * len(intro0) + '****\n'
	print intro
	del intro, intro0, intro1
	
	networks = eapeakParser.KnownNetworks.keys()
	networks.sort()
	for network in networks:
		print eapeakParser.KnownNetworks[network].show()
		print ''

	return 0

if __name__ == '__main__':
	main()
